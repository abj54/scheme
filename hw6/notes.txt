Anwesh Joshi

1. Apart from the fact that most of the primitive procedures are not
installed, it could not carry out even the simplest procedures like +,
\. Similarly, it would kick me out if there was any error without
warning. But a good thing I noticed here was it would remember any
thing that you would define in the s450 even if you came of of s450
and went back in. It was fun to figure it out as the variable is
stored in the environemnt (frame of the environment) as long as
anything is performed in the root frame, it also stays there. It can
be seen by viewing the global environment.


While running (f 3 4), I get#t#t#f#f(). It is correct as the variables
are first defined but are then unbounded so that they are no longer
defined.


The primitive procedures are stored in the first frame of
the-flobal-environemnt (root frame).


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

After doig rigorous amount of work on Assigment 4, creating a simple
1-D table for special form was one of the easiest part of the
assignments. All I had to do was put in the name and the eval part
that was already provided. But as mentioned, only env and exp should
be passed in to the lambda expression for the action of these special
forms and hence I had to create new procedures for lambda, begin, cond
and if which in turn call the provided procedures with necessary
arguments.

Primitive procedure got me thinking for a while as none of the
primitive-procedure stuff (names,objects) provided was to be used. So
my first job was to be able to setup the-global-environment without
it. I simply used 2 empty list as car and cdr of the particular frame
and xtended it with the empty-environment. After that I had to do what
primitive-proceure-names and primitive-procedure-objects had done. I
created a bind for the variable and value with the car and cdr of the
provided frame. I installed a bunch of procedures like +, \ and tested
it out. I also checked the-global-environment outside the 450 to
confirm that everything is properly installed in the root frame.

For part 4, I first changed the (s450) procedure itself to check if
the provdied expression is a symbol and if it is the special-table or not,
But Professor suggested me to instead put it in the xeval so that the main
provided procedure remains the same. Part 5 was similar as I changed
(eval-definition) and (eval-assignment) just to check if the definition
variable is in the special-table or not, if it is, I display a message
that says it is not possible to do so.

The last part was the trickiest part for me. i started with locally
defined, where I would take the variable and the first frame from the
expression and environment respectively. After that I would just check
if the variable is the member of the frame-variables for that frame,
and return true or false depending on that. For the defined portion, I
used locally defined recursively on all the frames of the given
environment, As soon as we see the variable, return true or else
keep searching on the enclosed environment.

For unbound portion, I had some difficulty as we have to remove item
from 2 lists simultaneously (variable and values). I tried to do a
function that would go through two lists and remove same item but my
issue was I was not able to move forward on one list i.e. I could
search up the variable on frame-variables but couldnot remove the item
at the same position. So instead of finding the variable and it's
value, I decided on moving by the index i.e. i would return the index
of variable on frame-variables. Then I would return a new list with
the item at that index removed. I used this on both frame-variables
and frame-values so that I removed both the variable and value at the
concerned position. I would them set these new lists as the car and
cdr of that frame. Just like defined, I then used this procedure
recursively on all the frames of the given environment.

To test this last part, I not only used the procedure provided in the
assignment but also modified the recursive sqrt provided in the
earlier part of the course. At different point, I would just unbound
some variable to get an error saying it is not available. Similarly,
I would remove some locally but the code would still work as the value
can be asked from the parent frames.
